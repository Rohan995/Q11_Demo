AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'This stack is serverless applications'
Resources:
    Q11ContestRegistration: {Type: 'AWS::Serverless::Function', Properties: {FunctionName: Q11_Contest_Registration, Handler: Q11_Contest_Registration.lambda_handler, Runtime: python2.7, CodeUri: 's3://q11demoproject/Q11_Contest_Registration.py.zip', Role: {'Fn::GetAtt': [DynamoDBFullAccess, Arn]}}}
    Q11ContestList: {Type: 'AWS::Serverless::Function', Properties: {FunctionName: Q11_Contest_List, Handler: Q11_Contest_List.lambda_handler, Runtime: python2.7, CodeUri: 's3://q11demoproject/Q11_Contest_List.py.zip', Role: {'Fn::GetAtt': [DynamoDBReadOnly, Arn]}}}
    Q11UserTeamScore: {Type: 'AWS::Serverless::Function', Properties: {FunctionName: Q11_User_TeamScore, Handler: Q11_User_Team_Score.lambda_handler, Runtime: python2.7, CodeUri: 's3://q11demoproject/Q11_User_Team_Score.py.zip', Role: {'Fn::GetAtt': [DynamoDBFullAccess, Arn]}}}
    Q11PlayerScoreCard: {Type: 'AWS::Serverless::Function', Properties: {FunctionName: Q11_Player_ScoreCard, Handler: Q11_Player_ScoreCard.lambda_handler, Runtime: python2.7, CodeUri: 's3://q11demoproject/Q11_Player_ScoreCard.py.zip', Role: {'Fn::GetAtt': [DynamoDBFullAccess, Arn]}}}
    Q11TeamRanking: {Type: 'AWS::Serverless::Function', Properties: {FunctionName: Q11_Team_Ranking, Handler: Q11_TeamRanking.lambda_handler, Runtime: python2.7, CodeUri: 's3://q11demoproject/Q11_TeamRanking.py.zip', Role: {'Fn::GetAtt': [DynamoDBReadOnly, Arn]}}}
    Q11TeamList: {Type: 'AWS::Serverless::Function', Properties: {FunctionName: Q11_Team_List, Handler: Q11_Team_List.lambda_handler, Runtime: python2.7, CodeUri: 's3://q11demoproject/Q11_Team_List.py.zip', Role: {'Fn::GetAtt': [DynamoDBReadOnly, Arn]}}}
    Q11UserTeamCreate: {Type: 'AWS::Serverless::Function', Properties: {FunctionName: Q11_User_Team_Create, Handler: Q11_User_team_create.lambda_handler, Runtime: python2.7, CodeUri: 's3://q11demoproject/Q11_User_team_create.py.zip', Role: {'Fn::GetAtt': [DynamoDBWriteOnly, Arn]}}}
    DynamoDBReadOnly: {Type: 'AWS::IAM::Role', Properties: {AssumeRolePolicyDocument: {Version: '2012-10-17', Statement: [{Effect: Allow, Principal: {Service: [lambda.amazonaws.com]}, Action: ['sts:AssumeRole']}]}, Path: /, Policies: [{PolicyName: DynamoDBReadOnly, PolicyDocument: {Version: '2012-10-17', Statement: [{Effect: Allow, Action: ['dynamodb:BatchGetItem', 'dynamodb:ListTables', 'dynamodb:ListBackups', 'dynamodb:Scan', 'dynamodb:ListTagsOfResource', 'dynamodb:Query', 'dynamodb:DescribeStream', 'dynamodb:DescribeTimeToLive', 'dynamodb:ListStreams', 'dynamodb:DescribeGlobalTableSettings', 'dynamodb:DescribeReservedCapacityOfferings', 'dynamodb:ListGlobalTables', 'dynamodb:DescribeTable', 'dynamodb:GetShardIterator', 'dynamodb:DescribeGlobalTable', 'dynamodb:DescribeReservedCapacity', 'dynamodb:GetItem', 'dynamodb:DescribeContinuousBackups', 'dynamodb:DescribeBackup', 'dynamodb:DescribeLimits', 'dynamodb:GetRecords'], Resource: '*'}]}}, {PolicyName: CloudWatchLog, PolicyDocument: {Version: '2012-10-17', Statement: [{Effect: Allow, Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'], Resource: '*'}]}}]}}
    DynamoDBWriteOnly: {Type: 'AWS::IAM::Role', Properties: {AssumeRolePolicyDocument: {Version: '2012-10-17', Statement: [{Effect: Allow, Principal: {Service: [lambda.amazonaws.com]}, Action: ['sts:AssumeRole']}]}, Path: /, Policies: [{PolicyName: DynamoDBWriteOnly, PolicyDocument: {Version: '2012-10-17', Statement: [{Effect: Allow, Action: ['dynamodb:BatchWriteItem', 'dynamodb:UpdateTimeToLive', 'dynamodb:UntagResource', 'dynamodb:PutItem', 'dynamodb:DeleteItem', 'dynamodb:PurchaseReservedCapacityOfferings', 'dynamodb:RestoreTableToPointInTime', 'dynamodb:UpdateGlobalTable', 'dynamodb:UpdateItem', 'dynamodb:CreateBackup', 'dynamodb:DeleteTable', 'dynamodb:UpdateContinuousBackups', 'dynamodb:CreateTable', 'dynamodb:UpdateGlobalTableSettings', 'dynamodb:TagResource', 'dynamodb:RestoreTableFromBackup', 'dynamodb:CreateGlobalTable', 'dynamodb:DeleteBackup', 'dynamodb:UpdateTable'], Resource: '*'}]}}, {PolicyName: CloudWatchLog, PolicyDocument: {Version: '2012-10-17', Statement: [{Effect: Allow, Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'], Resource: '*'}]}}]}}
    DynamoDBFullAccess: {Type: 'AWS::IAM::Role', Properties: {AssumeRolePolicyDocument: {Version: '2012-10-17', Statement: [{Effect: Allow, Principal: {Service: [lambda.amazonaws.com]}, Action: ['sts:AssumeRole']}]}, Path: /, Policies: [{PolicyName: DynamoDBFullAcess, PolicyDocument: {Version: '2012-10-17', Statement: [{Effect: Allow, Action: 'dynamodb:*', Resource: '*'}]}}, {PolicyName: CloudWatchLog, PolicyDocument: {Version: '2012-10-17', Statement: [{Effect: Allow, Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'], Resource: '*'}]}}]}}
    PlayersListDb: {Type: 'AWS::DynamoDB::Table', Properties: {TableName: Team_squad, AttributeDefinitions: [{AttributeName: TeamID, AttributeType: S}, {AttributeName: PlayerID, AttributeType: S}], KeySchema: [{AttributeName: TeamID, KeyType: HASH}, {AttributeName: PlayerID, KeyType: RANGE}], ProvisionedThroughput: {ReadCapacityUnits: '1', WriteCapacityUnits: '1'}}}
    UserTeamDB: {Type: 'AWS::DynamoDB::Table', Properties: {TableName: user-team, AttributeDefinitions: [{AttributeName: MatchID, AttributeType: S}, {AttributeName: UserTeamName, AttributeType: S}], KeySchema: [{AttributeName: MatchID, KeyType: HASH}, {AttributeName: UserTeamName, KeyType: RANGE}], ProvisionedThroughput: {ReadCapacityUnits: '1', WriteCapacityUnits: '1'}}}
    ContestsDB: {Type: 'AWS::DynamoDB::Table', Properties: {TableName: contests, AttributeDefinitions: [{AttributeName: MatchID, AttributeType: S}, {AttributeName: ContestID, AttributeType: S}], KeySchema: [{AttributeName: MatchID, KeyType: HASH}, {AttributeName: ContestID, KeyType: RANGE}], ProvisionedThroughput: {ReadCapacityUnits: '1', WriteCapacityUnits: '1'}}}
    PlayerScoreCardDB: {Type: 'AWS::DynamoDB::Table', Properties: {TableName: PlayerPointTable, AttributeDefinitions: [{AttributeName: TeamID, AttributeType: S}, {AttributeName: PlayerID, AttributeType: S}], KeySchema: [{AttributeName: TeamID, KeyType: HASH}, {AttributeName: PlayerID, KeyType: RANGE}], ProvisionedThroughput: {ReadCapacityUnits: '1', WriteCapacityUnits: '1'}}}
    UserPool: {Type: 'AWS::Cognito::UserPool', Properties: {UserPoolName: Q11Demo, AutoVerifiedAttributes: [email], Schema: [{AttributeDataType: String, Name: email, Required: true}, {AttributeDataType: String, Name: phone_number, Required: true}, {AttributeDataType: String, Name: birthdate, Required: true}, {AttributeDataType: String, Name: name, Required: true}, {AttributeDataType: Number, Name: WalletMoney, Mutable: true}, {AttributeDataType: String, Name: WinningHistory, Mutable: true}]}}
    UserPoolClient: {Type: 'AWS::Cognito::UserPoolClient', Properties: {ClientName: UserPoolClient, GenerateSecret: false, RefreshTokenValidity: 1, UserPoolId: {Ref: UserPool}}}

